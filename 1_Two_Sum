public class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] a=new int[2];
        for(int i=0; i<=nums.length-1;i++){
            for(int j=i+1;j<=nums.length-1;j++){
                if (nums[i]+nums[j]==target){
                    a[0]=i;
                    a[1]=j;
                    return a;
                }
            }
        }
    return a;
    }
}

//Approach #1 (Brute Force) [Accepted]

//The brute force approach is simple. Loop through each element xxx and find if there is another value that equals to target−xtarget - xtarget−x.

public int[] twoSum(int[] nums, int target) {
    for (int i = 0; i < nums.length; i++) {
        for (int j = i + 1; j < nums.length; j++) {
            if (nums[j] == target - nums[i]) {// why j first
                return new int[] { i, j };//why no "="
            }
        }
    }
    throw new IllegalArgumentException("No two sum solution");
}

//Complexity Analysis

//    Time complexity : O(n2)O(n^2)O(n​2​​). For each element, we try to find its complement by looping through the rest of array which takes O(n)O(n)O(n) time. Therefore, the time complexity is O(n2)O(n^2)O(n​2​​).

//    Space complexity : O(1)O(1)O(1).
